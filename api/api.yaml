openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "Segon Lliurament ASW \n\n Julen Galera | Dawid A. Sanecki | Pau Charques | Oriol Mart√≠n "
servers:
  - url: 'https://afternoon-hamlet-99408.herokuapp.com'
paths:

  /api/posts/all:
    get:
      tags:
      - Contributions
      summary: Retrieves all the url Contributions
      operationId: getAllContributions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'

  /api/posts/url:
    get:
      tags:
      - Contributions
      summary: Retrieves all the url Contributions
      operationId: getAllUrlContributions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
  
  /api/posts/ask:
    get:
      tags:
      - Contributions
      summary: Retrieves all the ask Contributions
      operationId: getAllAskContributions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
                  
  /api/posts/{id}:
    get:
      tags:
      - Contributions
      summary: Finds a Contribution which is a post by id
      operationId: getContributionById
      parameters:
      - name: id
        in: path
        description: Contribution Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Contribution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
                  
  /api/comments/{id}:
    get:
      tags:
      - Contributions
      summary: Finds a Contribution which is a comment by id
      operationId: getCommentById
      parameters:
      - name: id
        in: path
        description: Comment Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Contribution of comment type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
                  
  /api/replies/{id}:
    get:
      tags:
      - Contributions
      summary: Finds a Contribution which is a reply by id
      operationId: getReplyById
      parameters:
      - name: id
        in: path
        description: Reply Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Contribution of reply type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
                  
  /api/posts:
    post:
      security:
      - ApiKeyAuth: []
      tags:
      - Contributions
      summary: Adds a new Contribution of type post
      operationId: addPost
      requestBody:
        description: Provide 
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  example: 'This is a title'
                url:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  
  /api/comments:
    post:
      security:
      - ApiKeyAuth: []
      tags:
      - Contributions
      summary: Adds a new Contribution of type comment
      operationId: addComment
      requestBody:
        description: Provide 
        content:
          application/json:
            schema:
              required:
              - parent_id
              - content
              type: object
              properties:
                parent_id:
                  type: integer
                  format: int64
                  example: 2
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  
  /api/replies:
    post:
      security:
      - ApiKeyAuth: []
      tags:
      - Contributions
      summary: Adds a new Contribution of type reply
      operationId: addReply
      requestBody:
        description: Provide 
        content:
          application/json:
            schema:
              required:
              - parent_id
              - content
              type: object
              properties:
                parent_id:
                  type: integer
                  format: int64
                  example: 2
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Reply created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  
  /api/users/{id}:
    get:
      tags:
      - Users
      summary: Finds a User
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Us'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
                
    put:
      security:
      - ApiKeyAuth: []
      tags:
      - Users
      summary: Updates a User
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Provide 
        content:
          application/json:
            schema:
              required:
              - email
              type: object
              properties:
                email:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'oriol1@gmail.com'
        required: true
      responses:
        200:
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
                  
  /api/users/{id}/threads:
    get:
      tags:
      - Users
      summary: Retrieves all the Comments of one user with its id
      operationId: getCommentsByUserId
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Contribution
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
                  
  /api/me:
    get:
      security:
      - ApiKeyAuth: []
      tags:
      - Users
      summary: Shows de token user
      operationId: getTokenUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
                  
  /api/votes/{id}:
    get:
      tags:
      - Votes
      summary: Finds a Vote by id
      operationId: getVote
      parameters:
      - name: id
        in: path
        description: Vote id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Vote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
  /api/votes:
    post:
      security:
      - ApiKeyAuth: []
      tags:
      - Votes
      summary: Adds a new Vote
      operationId: addVote
      requestBody:
        description: Provide 
        content:
          application/json:
            schema:
              required:
              - contribution_id
              type: object
              properties:
                contribution_id:
                  type: integer
                  format: int64
                  example: 2
        required: true
      responses:
        201:
          description: Vote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
                  
components:
  schemas:
    Contribution:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        contr_type:
          type: string
          minLength: 4
          example: 'My type'
        contr_subtype:
          type: string
          minLength: 4
          example: 'url'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'post'
        user_id:
          type: integer
          format: int32
        url:
          type: string
          minLength: 4
          maxLength: 280
          example: 'https://news.ycombinator.com/'
        upvote:
          type: integer
          format: int32
        parent_id:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  
    Post:
      type: object
      properties:
        contribution:
          $ref: '#/components/schemas/Contribution'
        comment:
          type: array
          items:
            $ref: '#/components/schemas/Contribution'
            
    Us:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/User'
        Karma:
          type: array
          items:
            $ref: '#/components/schemas/Karma'
          
    Comment:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Contribution'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Contribution'
            
    Reply:
      type: object
      properties:
        reply:
          $ref: '#/components/schemas/Contribution'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Contribution'
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        email:
          type: string
          example: 'oriol.martin@gmail.com'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          
    Karma:
      type: object
      properties:
        karma:
          type: integer
          format: int32
          example: 1
      
    Vote:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        user_id:
          type: integer
          format: int32
          example: 2  
        contribution_id:
          type: integer
          format: int32
          example: 2
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time  
          
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (token Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (token Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Contribution with that ID"
        
  securitySchemes:      
    ApiKeyAuth:
        type: apiKey
        name: token #Custom headers in rails apps must have the X- prefix
        in: header